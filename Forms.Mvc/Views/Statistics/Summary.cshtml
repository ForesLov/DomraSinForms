@using DomraSinForms.Application.Answers.Queries.GetList;
@using DomraSinForms.ChartsWrapper.ApexCharts.Charts;
@using DomraSinForms.ChartsWrapper.ApexCharts;
@using DomraSinForms.Domain.Models.Questions;
@using Forms.Mvc.Models.Statistics;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Mvc.Localization;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@using DomraSinForms.ChartsWrapper.ApexCharts.Charts.BarChart;
@using DomraSinForms.ChartsWrapper.ApexCharts.Charts.PieChart;
@using DomraSinForms.ChartsWrapper.ApexCharts.Extensions;
@inject IViewLocalizer Localizer
@model SummaryViewModel
@{
    ViewData["Title"] = Localizer["Form answers"]?.Value;
    Dictionary<object, object> GetCountData(QuestionSummary summary)
    {
        var result = new Dictionary<object, object>();

        var allAnswers = summary.Answers.SelectMany(a => a.Split("; ")).ToArray();
        foreach (var answer in allAnswers.Distinct())
        {
            result.Add(answer, allAnswers.Count(a => a == answer));
        }
        return result;
    }
    Dictionary<object, object> GetPercentageData(QuestionSummary summary)
    {
        var result = new Dictionary<object, object>();

        var allAnswers = summary.Answers.SelectMany(a => a.Split("; ")).ToArray();
        foreach (var answer in allAnswers.Distinct())
        {
            result.Add(answer, (double)allAnswers.Count(a => a == answer) / (double)allAnswers.Length * 100d);
        }
        return result;
    }
}
<div class="row g-4 justify-content-center">
    <div class="col-12 row g-4 justify-content-center">
        @await Html.PartialAsync("_StatisticsNavigationPartial")
    </div>
</div>

<div class="row g-3 justify-content-center">
    <div class="col-sm-1 col-md-3 col-xl-3"></div>
    <div class="col-sm-12 col-md-6 col-xl-6 row g-3 gx-4">
        @foreach (var question in Model.Questions.OrderBy(q => q.Question.Index))
        {
                <div class="col-12">
                @await Html.PartialAsync("_AnsweredQuestionPartial", question)
                </div>
        }
    </div>
    <div class="col-sm-12 col-md-3 col-xl-3 col-12 mt-sm-0 mt-5">
        @await Html.PartialAsync("_FormNavigationPartial", Model.FormId)
    </div>
</div>
@section scripts {
    <script src="~/lib/apexcharts.js"></script>
        <script>
            function WriteChart(elementId, chartOptions){
                console.log('chart');
                let chart = new ApexCharts(document.querySelector(`#${elementId}`), chartOptions);
                console.log()
                chart.render();
            }
        </script>
    @foreach (var question in Model.Questions)
    {
        if (question.Question is OptionsQuestion oq)
        {
            var optionsBuilder = new ChartOptionsBuilder()
            .UsePalette(1);
            if (oq.AllowMultipleChoice)
                optionsBuilder.CreateBarChart(GetCountData(question));
            else
                optionsBuilder.CreatePieChart(GetPercentageData(question));

            var chartOptions = optionsBuilder.Build().Serialize();

            <script type="text/javascript">
                var options = JSON.parse('@(chartOptions)');
                //options.theme.mode = themeSwitch.isDarkTheme() ? 'dark' : 'light';
                console.log(options);
                console.log(options.series);
                console.log(options.xaxis);
                WriteChart('chart-@(question.Question.Id)', options);
            </script>
        }

        
    }
}
<style>
    .apexcharts-canvas {
        background-color: transparent;
    }
</style>
