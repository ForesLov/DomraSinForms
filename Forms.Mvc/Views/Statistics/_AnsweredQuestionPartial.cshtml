@using DomraSinForms.ChartsWrapper.ApexCharts;
@using DomraSinForms.ChartsWrapper.ApexCharts.Charts;
@using DomraSinForms.Domain.Models.Questions;
@using Forms.Mvc.Models.Answers;
@using Microsoft.AspNetCore.Html;
@using Newtonsoft.Json;
@using Forms.Mvc.Models.Statistics;
@using DomraSinForms.ChartsWrapper.Models;
@using DomraSinForms.ChartsWrapper.Models.Options;
@using Microsoft.AspNetCore.Mvc.Localization;
@using System.Text;
@using Newtonsoft.Json.Serialization;
@inject DomraSinForms.ChartsWrapper.Wrappers.Wrapper Wrapper
@inject DomraSinForms.ChartsWrapper.Wrappers.ScriptWrapper ScriptWrapper
@inject IViewLocalizer Localizer
@model QuestionSummary



@{
    var textStyle = new TextStyle
            {
                Color = "white",
            };
    Model.Answsers.First();
    //var countData = JsonConvert.SerializeObject(Chart.GetDataTableWithCount(Model));
    string FormatTextToUtf8(string text)
    {
        return Encoding.UTF8.GetString(Encoding.Default.GetBytes(text));
    }

    Dictionary<object, object> GetCountData()
    {
        var result = new Dictionary<object, object>();

        var allAnswers = Model.Answsers.SelectMany(a => a.Split("; ")).ToArray();
        foreach (var answer in allAnswers.Distinct())
        {
            result.Add(answer, allAnswers.Count(a => a == answer));
        }
        return result;
    }

    var chartOptions = JsonConvert.SerializeObject(
        new OptionsBuilder()
        .AddData<BarChartDataConverter>(GetCountData())
            .Build(),
        new JsonSerializerSettings 
        { 
            ContractResolver = new CamelCasePropertyNamesContractResolver(), 
            NullValueHandling = NullValueHandling.Ignore,
        }
    );
}

@section Scripts {
    <script type="text/javascript">
        var options = JSON.parse('@(new HtmlString(chartOptions))');
        //options.theme.mode = themeSwitch.isDarkTheme() ? 'dark' : 'light';
        options.theme.mode = 'light';
        console.log(options);
        WriteChart('chart-@(Model.Question.Id)', options);
        document.addEventListener('load', event => {

        });
    </script>
    <script>
        console.log("fuck")
    </script>
}

<div class="card" data-bs-toggle="modal" data-bs-target="#modal-@Model.Question.Id">
    <div class="card-body">
        <div class="card-title h5">@Model.Question.QuestionText</div>
    </div>
    <div class="card-footer" onload="console.log()">
        @switch (Model.Question)
        {
            case OptionsQuestion options:
                {
                    <div id="chart-@Model.Question.Id"></div>

                    if (options.AllowMultipleChoice)
                    {
                       
                    }
                    else
                    {
                    }
                }

                break;
            case TextQuestion:

                @foreach (var answer in Model.Answsers.Distinct().Take(10))
                {
                    <div class="form-group my-1">
                        <input class="form-control" value="@answer" disabled />
                    </div>
                }
                break;
        }
    </div>
</div>

<div class="modal" id="modal-@Model.Question.Id">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content p-1 text-center">

            <div class="modal-body justify-content-center">
                <div class="h5">@Localizer["All answers"]:</div>
                @foreach (var answers in Model.Answsers.ToArray())
                {
                    <div class="card my-2">
                        <div class="card-body">
                            @foreach (var answer in answers.Split("; "))
                            {
                                <div class="form-group my-1">
                                    <input class="form-control my-1" value="@answer" disabled />
                                </div>

                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>




