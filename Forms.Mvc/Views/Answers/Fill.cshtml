@using DomraSinForms.Application.Answers.Commands.Create;
@using DomraSinForms.Domain.Models.Questions;
@using Forms.Mvc.Models.Answers;
@using Forms.Mvc.Models.Answers.AnswersModels;
@using Microsoft.AspNetCore.Mvc.Localization;
@model FillFormViewModel
@inject IViewLocalizer Localizer
@{
    //ViewData["Title"] = $"{Localizer["Fill form"].Value} {Model.Form.Title}";
}

<div class="row g-3 justify-content-center">
    <div class="col-sm-10 col-md-7 col-xl-5 row g-3">
        @foreach (var answer in Model.Answers.OrderBy(a => a.Index))
        {
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="card-title">@answer.Question.QuestionText</div>
                        @await Html.PartialAsync("_AnswerPartial", answer)
                    </div>
                </div>
            </div>
        }
        <div class="col-12">
            <form asp-controller="Answers" asp-action="CompleteForm" method="post">
                <button class="form-control btn btn-primary" type="submit">@Localizer["Send"]</button>
            </form>
        </div>
    </div>
    
    
</div>

</div>


<script>
    const actionUrl = "@(Url.Action("UpdateForm", "Answers"))";

    function createElementFromHTML(htmlString) {
        let div = document.createElement('div');
        div.innerHTML = htmlString.trim();
        console.log(div);
        // Change this to div.childNodes to support multiple top-level nodes.
        return div;
    }

    function updateForm(method, url, body) {
        return new Promise( (resolve, reject) => {
            const xhr = new XMLHttpRequest();
            
            xhr.open(method, url);
            xhr.setRequestHeader("Content-Type", "application/json");
            
            xhr.onload = () => {
                if (xhr.status == 200) {
                    console.log("response Ok");
                    resolve(xhr.response);
                }
                else reject("");
            };
            
            xhr.onerror = () => {
                console.log(xhr.response);
                reject("");
            };
            console.log(xhr);
            xhr.send(body);
        })
    }
    

    let deleteOption = (optionId) => {
        console.log("start removing option");
        document.getElementById(optionId).remove();
    }
</script>